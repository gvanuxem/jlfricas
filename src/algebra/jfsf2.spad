)abbrev package JFSF2 JLFloatSpecialFunctions2
++ Special functions computed using Julia's ecosystem.
++ They are here essentially for "completeness" purpose with
++ JLFloat.
JLFloatSpecialFunctions2() : Exports == Implementation where
  JF ==> JLFloat
  Exports ==> with

    -- Gamma Function
  
    Gamma : JF -> JF
    ++ Gamma(z) computes gamma function \Gamma(z).
    logGamma : JF -> JF
    ++ logGamma(x) computes accurate log(gamma(x)) for large x.
    digamma : JF -> JF
    ++ digamma(x) computes digamma function (i.e. the derivative of logGamma at x).
    Gamma : (JF, JF) -> JF
    ++ Gamma(a,z) computes upper incomplete gamma function \Gamma(a,z).
    logGamma : (JF, JF) -> JF
    ++ logGamma(a,z) computes accurate log(gamma(a,x)) for large arguments.
    Beta : (JF, JF) -> JF
    ++ Beta(x,y) computes beta function at x,y.
    logBeta : (JF, JF) -> JF
    ++ logBeta(x,y) computes accurate log(beta(x,y)) for large x or y.
    
    -- Exponential and Trigonometric Integrals
    
    expint : (JF, JF) -> JF
    ++ expint(nu, z) computes exponential integral E\nu(z).
    Ei : JF -> JF
    ++ Ei(x) computes exponential integral Ei(x).

    -- Error Functions, Dawson’s and Fresnel Integrals

    erf : JF -> JF
    ++ erf(x) computes error function at x.
    erf : (JF, JF) -> JF
    ++ erf(x,y) computes accurate version of erf(y) - erf(x).
    erfc : JF -> JF
    ++ erfc(x) computes complementary error function,
    ++ i.e. the accurate version of 1-erf(x) for large x.
    inverseErfc : JF -> JF
    ++ inverseErfc(x) computes the inverse function of erfc.
    erfcx : JF -> JF
    ++ erfcx(x) computes scaled complementary error function,
    ++ i.e. accurate e^{x^2} erfc(x) for large x.
    logerfc : JF -> JF
    ++ logerfc(x) computes log of the complementary error function,
    ++ i.e. accurate ln(erfc(x)) for large x.
    logerfcx : JF -> JF
    ++ logerfcx(x) computes log of the scaled complementary error function,
    ++ i.e. accurate ln(erfcx(x)) for large negative x.
    inverseErf : JF -> JF
    ++ inverseErf(x) computes inverse function of erf.

    -- Airy

    airyAi : JF -> JF
    ++ airyAi(z) computes Airy Ai function at z

    -- Bessel Functions

    besselJ0 : JF -> JF
    ++ besselJ0(z) computes besselj(0,z).
    besselJ1 : JF -> JF
    ++ besselJ1(z) computes besselj(1,z).
    besselY0 : JF -> JF
    ++ besselY0(z) computes bessely(0,z).
    besselY1 : JF -> JF
    ++ besselY1(z) computes bessely(1,z).
    jinc : JF -> JF
    ++ jinc(x) computes scaled Bessel function of the first kind
    ++ divided by x. A.k.a. sombrero or besinc.
    
    -- Zeta and Related Functions
 
    eta : JF -> JF
    ++ eta(x) computes Dirichlet eta function at x.
    riemannZeta : JF -> JF
    ++ riemannZeta(x) computes Riemann zeta function at x.

  Implementation ==> add
    import from JLUtilityFunctions
    
    -- Gamma Functions

    Gamma(z) == jlApply("gamma", z)
    logGamma(x) == jlApply("loggamma", x)
    digamma(x) == jlApply("digamma", x)
    Gamma(a,z) == jlApply("gamma", a, z)
    logGamma(a,z) == jlApply("loggamma", a, z)
    Beta(x,y) == jlApply("beta", x, y)
    logBeta(x,y) == jlApply("logbeta", x, y)

    -- Exponential and Trigonometric Integrals

    expint(nu, z) == jlApply("expint", nu, z)
    Ei(x) == jlApply("expinti", x)
    
    -- Error Functions, Dawson’s and Fresnel Integrals

    erf(x) == jlApply("erf", x)
    erf(x,y) == jlApply("erf", x, y)
    erfc(x) == jlApply("erfc", x)
    inverseErfc(x) == jlApply("erfcinv", x)
    erfcx(x) == jlApply("erfcx", x)
    logerfc(x) == jlApply("logerfc", x)
    logerfcx(x) == jlApply("logerfcx", x)
    inverseErf(x) == jlApply("erfinv", x)

    -- Airy and Related Functions

    airyAi(z) == jlApply("airyai", z)
  
    -- Bessel Functions

    besselJ0(z) == jlApply("besselj0", z)
    besselJ1(z) == jlApply("besselj1", z)
    besselY0(z) == jlApply("bessely0", z)
    besselY1(z) == jlApply("bessely1", z)
    jinc(x) == jlApply("jinc", x)

    -- Zeta and Related Functions

    eta(x) == jlApply("eta", x)
    riemannZeta(x) == jlApply("zeta", x)



