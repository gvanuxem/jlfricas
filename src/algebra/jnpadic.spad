)abbrev category NPADICC NMPadicNumberCategory
++ Author: Grégory Vanuxem (based on the work of Clifton J. Williamson)
++ Date Created: 1 February 2025
++ Basic Operations:
++ Related Domains:
++ Also See:
++ AMS Classifications:
++ Keywords: p-adic, completion
++ Examples:
++ References:
++ Description: This is the category representations of
++   the p-adic numbers.
NMPadicNumberCategory(p) : Category == Definition where
  p     :   Integer
  NINT  ==> NMInteger
  I     ==> Integer
  NNI   ==> NonNegativeInteger
  Definition ==> Join(NMCommutativeRing, EuclideanDomain, CharacteristicZero,
      RadicalCategory, ElementaryFunctionCategory) with
    --digits : % -> ST I
    --  ++ \spad{digits(x)} returns a stream of p-adic digits of x.
    order : % -> NNI
      ++ \spad{order(x)} returns the exponent of the highest power of p
      ++ dividing x.
    extend : (%, I) -> %
      ++ \spad{extend(x, n)} forces the computation of digits up to order n.
    complete : % -> %
      ++ \spad{complete(x)} forces the computation of all digits.
    modulus : () -> I
      ++ \spad{modulus()} returns the value of p.
    moduloP : % -> I
      ++ \spad{modulo(x)} returns a, where \spad{x = a + b p}.
    quotientByP : % -> %
      ++ \spad{quotientByP(x)} returns b, where \spad{x = a + b p}.
    approximate : (%, I) -> I
      ++ \spad{approximate(x, n)} returns an integer y such that
      ++ \spad{y = x (mod p^n)}
      ++ when n is positive, and 0 otherwise.
    --root : (SUP I, I) -> %
    --  ++ \spad{root(f, a)} returns a root of the polynomial \spad{f}.
    --  ++ Argument \spad{a} must be a root of \spad{f} \spad{(mod p)}.

)abbrev domain NXPADICZ NMExtendedPadicInteger
++ Author: Vanuxem Grégory
++ Date Created: 1 February 2025
++ Basic Operations:
++ Related Domains:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ Keywords: p-adic, completion
++ Examples:
++ References:
++ Description:
++   This domain implements Zp, the p-adic completion of the integers.
NMExtendedPadicInteger(p : Integer, prec : Integer) :
    Exports == Implementation where
  --unBalanced? : Boolean
  I    ==> Integer
  NNI  ==> NonNegativeInteger
  OUT  ==> OutputForm
  NINT ==> NMInteger
  NFINT ==> NMFraction(NMInteger)
  Exports ==> NMPadicNumberCategory(p) with
    "+" : (NINT, %) -> %
    ++ i + x is the addition of a Julia Nemo Integer
    ++ and a p-adic number.
    "+" : (%, NINT) -> %
    ++ x + i is the addition of a p-adic number
    ++ and a Julia Nemo integer.
    "+" : (%, NFINT) -> %
    ++ x + q is the addition of a p-adic number
    ++ and a Julia Nemo Fraction integer.
    "+" : (NFINT, %) -> %
    ++ q + x is the addition of Julia Nemo Fraction integer
    ++ and a p-adic number.
    "*" : (%, NFINT) -> %
    ++ x * q is the multiplication of a p-adic number
    ++ and a Julia Nemo Fraction integer.
    "*" : (NFINT, %) -> %
    ++ q * x is the multiplication of Julia Nemo Fraction integer
    ++ and a p-adic number.
    "*" : (NINT, %) -> %
    ++ i * x is the multiplication of a NemoInteger and a p-adic number.
    "*" : (%, NINT) -> %
    ++ x * i is the multiplication of an Integer and a p-adic number.
    ++ For example:
    ++ \example{p := 1 + 2*7 + 4*7^2 + O()$NPADICZ(7)}
    valuation : % -> %
    ++ valuation(x) is the valuation of x.
    liftZ : % -> NINT
    ++ liftZ(x) lift x to a Nemo Integer.
    liftQ : % -> NFINT
    ++ liftQ(x) lift x to a Nemo Fraction Nemo Integer.
    teichmuller : % -> %
    ++ teichmuller(x) computes the Teichmuller lift of x.
    ++ The valuation of x must be non negative.
    coerce : NMInteger -> %
    ++ coerce(x) returns x as the p-adic completion of the Nemo Integer.    
    jnpadic : Integer -> %
    ++ jnpadic(x) returns x as the p-adic completion of the Nemo Integer. 
    jnpadic : NMInteger -> %
    ++ jnpadic(x) returns x as the p-adic completion of the Nemo Integer.
    O : () -> %
    ++ O() returns the default Big-oh from domain parameters.
    prime : % -> I
    ++ prime(x) returns the modulus used for x.
    ++ Convenience function.
    precision : % -> I
    ++ precision(x) returns the precision used for x.
  Implementation ==> add
    import from JLUtilityFunctions
    import from String

    jlImport "Nemo.Generic.prime"
    jlImport "Nemo.O"

    getind(a) ==> concat(["getindex(refs,", string(jlId(a)), ")"])
    junfunc(func, a) ==> make_jlref_wcall1(func, a)$Lisp
    jbinfunc(func,a,b) ==> make_jlref_wcall2(func, a, b)$Lisp
    junbfunc(bfunc, a) ==> jl_call1_bool_wrapped_index(bfunc, jlId(a))$Lisp
    jbinbfunc(op,a,b) ==> jl_call2_bool_wrapped_index(op, jlId(a), jlId(b))$Lisp

    Rep := SExpression
    
    -- Set up the field
    EXPADICZP := concat(["PADICZ", string(p), "p",string(prec)])
    jlEvalString(concat([EXPADICZP, "=padic_field(ZZ(", string(p), "), precision=", string(prec),")"]))
    jlNMRing() == EXPADICZP
    EXPADICZPP := concat(EXPADICZP,"(")
    jlObject() == jlEvalString(concat(["string(", EXPADICZP,")"]))
    O() == jlref(concat(["O(",EXPADICZP,",ZZ(", string(p),")^",string(prec),")"]))

    unit?(a) == junbfunc("is_unit", a)
    one?(a) == junbfunc("isone", a)
    zero?(a) == junbfunc("iszero", a)

    0 ==  jlref(concat ["zero(", EXPADICZP, ")"])
    1 ==  jlref(concat ["one(", EXPADICZP, ")"])
    pa : % = pb : % == jbinbfunc("==", pa,pb) 
    pa : % ~= pb : % == jbinbfunc("!=", pa,pb)

    (pa:% + pb:%) : % == jbinfunc("+", pa,pb)
    (pa:% - pb:%) : % == jbinfunc("-", pa,pb)
    (pa:% * pb:%) : % == jbinfunc("*", pa,pb)
    (pa:% / pb:%) : % == jbinfunc("/", pa,pb)

    a : NINT + pa : % == jbinfunc("+",a,pa)
    a : NINT * pa : % == jbinfunc("*",a,pa)
    pa : % + a : NINT == jbinfunc("+",pa,a)
    pa : % * a : NINT == jbinfunc("*", pa, a)
    pa : % * a : NFINT == jbinfunc("*", pa, a)
    a  : NFINT * pa: % == jbinfunc("*", a, pa)
    pa : % + a : NFINT == jbinfunc("+", pa, a)
    a  : NFINT + pa: % == jbinfunc("+", a, pa)

    characteristic() == 0

    --euclideanSize(x) == order(retract x)

    prime(x) == p
    precision(x) == prec
    sqrt(x) == junfunc("sqrt",x)
    valuation(x) == junfunc("valuation",x)
    exp(x) == junfunc("exp",x)
    log(x) == junfunc("log",x)
    teichmuller(x) == junfunc("teichmuller",x)
    liftZ(x) == jlref(concat(["lift(","ZZ", ",", getind(x),")"]))$NINT
    liftQ(x) == jlref(concat(["lift(","QQ", ",", getind(x),")"]))$NFINT
    --digits x == stream x

    --extend(x, n) == extend(x, n + 1)$Rep
    --complete x == complete(x)$Rep

    --modP : I -> I
    --modP n ==
      --unBalanced? or (p = 2) => positiveRemainder(n, p)
      --symmetricRemainder(n, p)

    --modPInfo : I -> Record(digit : I, carry : I)
    --modPInfo n ==
    --  dv := divide(n, p)
    --  r0 := dv.remainder; q := dv.quotient
    --  if (r := modP r0) ~= r0 then q := q + ((r0 - r) quo p)
    --  [r, q]

    --invModP : I -> I
    --invModP n == invmod(n, p)

    modulus() == p
    --moduloP x     == (empty? x => 0; frst x)
    --quotientByP x == (empty? x => x; rst x)

    --approximate(x, n) ==
    --  n <= 0 or empty? x => 0
    --  frst x + p * approximate(rst x, n - 1)

    --x = y ==
    -- st : ST I := stream(x - y)
    --  n : I := _$streamCount$Lisp
    --  for i in 0..n repeat
    --    empty? st => return true
    --    frst st ~= 0 => return false
    --   st := rst st
    --  empty? st

    --order x ==
    --  st := stream x
    --  for i in 0..1000 repeat
    --    empty? st => return 0
    --    frst st ~= 0 => return i
    --    st := rst st
    --  error "order: series has more than 1000 leading zero coefs"

    coerce(i : Integer) == jlref(concat([EXPADICZPP, string(i),")"]))
    coerce(i : NMInteger) == jlref(concat([EXPADICZPP, string(i),")"]))
    jnpadic(x : Integer) == jlref(concat([EXPADICZPP, string(x),")"]))
    jnpadic(i : NMInteger) == jlref(concat([EXPADICZPP, string(i),")"]))
    coerce(x) : OUT == string(x) pretend OUT

)abbrev domain NPADICZ NMPadicInteger
++ Author: Grégory Vanuxem
++ Date Created: 3 February 2025
++ Basic Operations:
++ Related Domains: NMExtendedPadicInteger
++ Also See: NMPadicNumberCategory
++ AMS Classifications:
++ Keywords: p-adic, completion
++ Examples:
++ References:
++ Description:
++   Implementation of Zp: p-adic numbers are represented as
++   sum(i = 0.., a[i] * p^i), where the a[i] lie in 0, 1, ..., (p - 1).
NMPadicInteger(p : Integer) == NMExtendedPadicInteger(p, 64)

)abbrev domain NPADIC2 NMPadic2
++ Author: Grégory Vanuxem
++ Date Created: 3 February 2025
++ Basic Operations:
++ Related Domains: NMExtendedPadicInteger
++ Also See: NMPadicNumberCategory
++ AMS Classifications:
++ Keywords: p-adic, completion
++ Examples:
++ References:
++ Description:
++   Implementation of Zp: here, 2-adic numbers are represented as
++   sum(i = 0.., a[i] * p^i), where the a[i] lie in 0, 1, ..., (p - 1).
NMPadic2() == NMExtendedPadicInteger(2, 64)

)abbrev domain NXPADICR NMExtendedPadicRational
++ Author: Grégory Vanuxem
++ Date Created: 4 april 2025
++ Basic Operations:
++ Related Domains:
++ Also See:
++ AMS Classifications:
++ Keywords: q-adic, completion
++ Examples:
++ References:
++ Description: This is a domain of Qp.
NMExtendedPadicRational(p,deg,prec) : Exports == Implementation where
  p     :   Integer
  deg   :   Integer
  prec  :   Integer
  NINT ==> NMInteger
  NFINT ==> NMFraction(NMInteger)
  PADIC ==> NMPadicNumberCategory(p)
  I     ==> Integer
  NNI   ==> NonNegativeInteger
  OUT   ==> OutputForm
  RN    ==> Fraction Integer
  Exports ==> Join(NMCommutativeRing,
      QuotientFieldCategory(NMExtendedPadicInteger(p,prec)),
      RadicalCategory, ElementaryFunctionCategory) with
    "+" : (NINT, %) -> %
    ++ i + x is the addition of a Julia Nemo Integer
    ++ and a q-adic number.
    "+" : (%, NINT) -> %
    ++ x + i is the addition of a q-adic number
    ++ and a Julia Nemo integer.
    "+" : (%, NFINT) -> %
    ++ x + q is the addition of a q-adic number
    ++ and a Julia Nemo Fraction integer.
    "+" : (NFINT, %) -> %
    ++ q + x is the addition of Julia Nemo Fraction integer
    ++ and a q-adic number.
    "*" : (%, NFINT) -> %
    ++ x * q is the multiplication of a q-adic number
    ++ and a Julia Nemo Fraction integer.
    "*" : (NFINT, %) -> %
    ++ q * x is the multiplication of Julia Nemo Fraction integer
    ++ and a q-adic number.
    "*" : (NINT, %) -> %
    ++ i * x is the multiplication of a NemoInteger and a q-adic number.
    "*" : (%, NINT) -> %
    ++ x * i is the multiplication of an Integer and a q-adic number.
    ++ For example:
    ++ \example{p := 1 + 2*7 + 4*7^2 + O()$NPADICZ(7)}
    valuation : % -> %
    ++ valuation(x) is the valuation of x.
    liftZ : % -> NINT
    ++ liftZ(x) lift x to a Nemo Integer if possible.
    liftQ : % -> NFINT
    ++ liftQ(x) lift x to a Nemo Fraction Nemo Integer.
    teichmuller : % -> %
    ++ teichmuller(x) computes the Teichmuller lift of x.
    ++ The valuation of x must be non negative.
    frobenius : (%, I) -> %
    ++ frobenius(x,i) returns  the image of the i-th power of Frobenius
    ++ of x.
    coerce : NMInteger -> %
    ++ coerce(x) returns x as the q-adic completion of the Nemo Integer.    
    jnpadic : Integer -> %
    ++ jnpadic(x) returns x as the q-adic completion of the Nemo Integer. 
    jnpadic : NMInteger -> %
    ++ jnpadic(x) returns x as the q-adic completion of the Nemo Integer.
    O : () -> %
    ++ O() returns the default Big-oh from domain parameters.
    prime : % -> I
    ++ prime(x) returns the modulus used for x.
    ++ Convenience function.
    precision : % -> I
    ++ precision(x) returns the precision used for x.
    modulus : () -> I
      ++ \spad{modulus()} returns the value of p.
  Implementation ==> add
    import from JLUtilityFunctions
    import from String
  
    jlImport "Nemo.Generic.prime"
    jlImport "Nemo.O"
  
    getind(a) ==> concat(["getindex(refs,", string(jlId(a)), ")"])
    junfunc(func, a) ==> make_jlref_wcall1(func, a)$Lisp
    jbinfunc(func,a,b) ==> make_jlref_wcall2(func, a, b)$Lisp
    junbfunc(bfunc, a) ==> jl_call1_bool_wrapped_index(bfunc, jlId(a))$Lisp
    jbinbfunc(op,a,b) ==> jl_call2_bool_wrapped_index(op, jlId(a), jlId(b))$Lisp
  
    Rep := SExpression
    
    -- Set up the field
    PADICQ := concat(["PADICQ", string(p), "p",string(prec)])
    jlEvalString(concat([PADICQ, ",_=qadic_field(ZZ(", string(p), "),", string(deg),
      ",precision=", string(prec),")"]))
    jlNMRing() == PADICQ
    PADICQP := concat(PADICQ,"(")
    jlObject() == jlEvalString(concat(["string(", PADICQ,")"]))
    O() == jlref(concat(["O(",PADICQ,",ZZ(", string(p),")^",string(prec),")"]))
  
    unit?(a) == junbfunc("is_unit", a)
    one?(a) == junbfunc("isone", a)
    zero?(a) == junbfunc("iszero", a)
  
    0 ==  jlref(concat ["zero(", PADICQP, "))"])
    1 ==  jlref(concat ["one(", PADICQP, "))"])
    pa : % = pb : % == jbinbfunc("==", pa,pb) 
    pa : % ~= pb : % == jbinbfunc("!=", pa,pb)
  
    (pa:% + pb:%) : % == jbinfunc("+", pa,pb)
    (pa:% - pb:%) : % == jbinfunc("-", pa,pb)
    (pa:% * pb:%) : % == jbinfunc("*", pa,pb)
    (pa:% / pb:%) : % == jbinfunc("/", pa,pb)
  
    a : NINT + pa : % == jbinfunc("+",a,pa)
    a : NINT * pa : % == jbinfunc("*",a,pa)
    pa : % + a : NINT == jbinfunc("+",pa,a)
    pa : % * a : NINT == jbinfunc("*", pa, a)
    pa : % * a : NFINT == jbinfunc("*", pa, a)
    a  : NFINT * pa: % == jbinfunc("*", a, pa)
    pa : % + a : NFINT == jbinfunc("+", pa, a)
    a  : NFINT + pa: % == jbinfunc("+", a, pa)
  
    characteristic() == 0
  
    --euclideanSize(x) == order(retract x)
  
    prime(x) == p
    precision(x) == prec
    sqrt(x) == junfunc("sqrt",x)
    valuation(x) == junfunc("valuation",x)
    exp(x) == junfunc("exp",x)
    log(x) == junfunc("log",x)
    teichmuller(x) == junfunc("teichmuller",x)
    frobenius(x,n) == jlref(concat ["frobenius(",getind(x),",", string(n),")"])
    liftZ(x) == jlref(concat(["lift(","ZZ", ",", getind(x),")"]))$NINT
    liftQ(x) == jlref(concat(["lift(","QQ", ",", getind(x),")"]))$NFINT
    --digits x == stream x
  
    --extend(x, n) == extend(x, n + 1)$Rep
    --complete x == complete(x)$Rep
  
    --modP : I -> I
    --modP n ==
      --unBalanced? or (p = 2) => positiveRemainder(n, p)
      --symmetricRemainder(n, p)
  
    --modPInfo : I -> Record(digit : I, carry : I)
    --modPInfo n ==
    --  dv := divide(n, p)
    --  r0 := dv.remainder; q := dv.quotient
    --  if (r := modP r0) ~= r0 then q := q + ((r0 - r) quo p)
    --  [r, q]
  
    --invModP : I -> I
    --invModP n == invmod(n, p)
  
    modulus() == p
    --moduloP x     == (empty? x => 0; frst x)
    --quotientByP x == (empty? x => x; rst x)
  
    --approximate(x, n) ==
    --  n <= 0 or empty? x => 0
    --  frst x + p * approximate(rst x, n - 1)
  
    --x = y ==
    -- st : ST I := stream(x - y)
    --  n : I := _$streamCount$Lisp
    --  for i in 0..n repeat
    --    empty? st => return true
    --    frst st ~= 0 => return false
    --   st := rst st
    --  empty? st
  
    --order x ==
    --  st := stream x
    --  for i in 0..1000 repeat
    --    empty? st => return 0
    --    frst st ~= 0 => return i
    --    st := rst st
    --  error "order: series has more than 1000 leading zero coefs"
  
    coerce(i : Integer) == jlref(concat([PADICQP, string(i),")"]))
    coerce(i : NMInteger) == jlref(concat([PADICQP, string(i),")"]))
    jnpadic(x:Integer) == jlref(concat([PADICQP, string(x),")"]))
    jnpadic(i : NMInteger) == jlref(concat([PADICQP, string(i),")"]))
    coerce(x) : OUT == string(x) pretend OUT

)abbrev domain NPADICR NMPadicRational
++ Author: Grégory Vanuxem
++ Date Created: 4 april 2025
++ Basic Operations:
++ Related Domains:
++ Also See:
++ AMS Classifications:
++ Keywords: q-adic, completion
++ Examples:
++ References:
++ Description: This is a domain of Qp.
NMPadicRational(p : Integer) == NMExtendedPadicRational(p, 1, 64)