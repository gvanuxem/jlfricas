)abbrev package JF64SF JLFloat64SpecialFunctions
++ Special functions computed using Julia's ecosystem.
++ They are here essentially for "completeness" purpose with
++ JLFloat64. You should use the DoubleFloat's special
++ functions if available, calling Julia functions is costly.
JLFloat64SpecialFunctions() : Exports == Implementation where
  JF64 ==> JLFloat64
  JI64 ==> JLInt64
  Exports ==> with
    ldexp : (JF64, JI64) -> JF64
    ++ ldexp(x,n) computes x*2^n
    exp2   : JF64 -> JF64
    ++ exp2(x) computes the base 2 exponential of x.
    exp10   : JF64 -> JF64
    ++ exp10(x) computes the base 10 exponential of x.
    log1p : JF64 -> JF64
    ++ log1p(x) computes accurately natural logarithm of 1+x.

    sind   : JF64 -> JF64
    ++ sind(x) computes sine of x, where x is in degrees.
    sinpi  : JF64 -> JF64
    ++ sinpi(x) computes sin(pi*x) more accurately.
    sinc   : JF64 -> JF64
    ++ sinc(x) computes sin(pi*x)/(pi*x) if x~=0, and 1 if x=0.
    cosd  : JF64 -> JF64
    ++ cosd(x) computes cosine of x, where x is in degrees.
    cospi : JF64 -> JF64
    ++ cospi(x) computes cos(pi*x) more accurately.
    cosc  : JF64 -> JF64
    ++ cosc(x) computes cos(pi*x)/xâˆ’sin(pi*x)/(pi*x^2)
    ++ if x~=0, and 0 if x=0 i.e. the derivative of sinc(x).
    tand  : JF64 -> JF64
    ++ tand(x) computes tangent of x, where x is in degrees.
    tanpi : JF64 -> JF64
    ++ tanpi(x) computes tan(pi*x) more accurately.
    cotd  : JF64 -> JF64
    ++ cotd(x) computes cotangent of x, where x is in degrees.
    secd  : JF64 -> JF64
    ++ secd(x) computes secant of x, where x is in degrees.
    cscd  : JF64 -> JF64
    ++ cscd(x) computes cosecant of x, where x is in degrees.
    hypot : (JF64, JF64) -> JF64
    ++ hypot(x,y) computes the hypotenuse avoiding overflow and underflow.

    asind : JF64 -> JF64
    ++ asind(x) computes the inverse sine of x, where output is in degrees.
    acosd : JF64 -> JF64
    ++ acosd(x) computes the inverse cosine of x, where output is in degrees.
    atand : JF64 -> JF64
    ++ atand(x) computes the inverse tangent of x, where output is in degrees.
    atand  : (JF64, JF64) -> JF64
    ++ atand(x, y) computes the inverse tangent of x/y, where output is in degrees.
    acotd : JF64 -> JF64
    ++ acotd(x) computes the inverse cotangent of x, where output is in degrees.
    asecd : JF64 -> JF64
    ++ asecd(x) computes the inverse secant of x, where output is in degrees.
    acscd : JF64 -> JF64
    ++ acscd(x) computes the inverse cosecant of x, where output is in degrees.
    rad2deg  : JF64 -> JF64
    ++ rad2deg(x) converts x to degrees, where x is in radians.
    deg2rad  : JF64 -> JF64
    ++ deg2rad(x) converts x to radian, where x is in degrees.

  Implementation ==> add

    ldexp(x,n) == jl_dbl_function_dbl_int64("ldexp", x, n)$Lisp
    exp2(x)    == jlApply("exp2", x)
    exp10(x)   == jlApply("exp10", x)
    log1p(x)   == jlApply("log1p", x)

    sinpi(x) == jlApply("sinpi", x)
    sinc(x)  == jlApply("sinc", x)
    cospi(x) == jlApply("cospi", x)   
    cosc(x)  == jlApply("cosc", x)   
    tanpi(x) == jlApply("tanpi", x)
    hypot(x,y) == jlApply("hypot", x, y)

    sind(x) == jlApply("sind", x)
    cosd(x) == jlApply("cosd", x)
    tand(x) == jlApply("tand", x)
    cotd(x) == jlApply("cotd", x)
    secd(x) == jlApply("secd", x)
    cscd(x) == jlApply("cscd", x)

    asind(x) == jlApply("asind", x)
    acosd(x) == jlApply("acosd", x)
    atand(x) == jlApply("atand", x)
    atand(x,y) == jlApply("atand", x, y)
    acotd(x) == jlApply("acotd", x)
    asecd(x) == jlApply("asecd", x)
    acscd(x) == jlApply("acscd", x)

    rad2deg(x) == jlApply("rad2deg", x)
    deg2rad(x) == jlApply("deg2rad", x)
