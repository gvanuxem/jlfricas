)abbrev category JMATCAT JLMatrixCategory
++ Description: This category provides Julia matrices.
JLMatrixCategory(R : Join(JLType, AbelianMonoid), 
  Row : FiniteLinearAggregate R,
  Col : FiniteLinearAggregate R) : Category == 
    Join(JLType, MatrixCategory(R, Row, Col))

)abbrev category JVECCAT JLVectorCategory
++ Description: This category provides Julia vectors.
JLVectorCategory(JT : JLType) : Category == VectorCategory(JT)

)abbrev domain JI64VEC JLInt64Vector
++ Description: This domain provides a fast JLInt64 vector type
++ with no bound checking on elt's. Minimum index is 1.
++ Convenience domain.
JLInt64Vector() : Exports == Implementation where
  NNI             ==> NonNegativeInteger
  JI64            ==> JLInt64
  Qnew            ==> make_int64_array1$Lisp
  Qnew1           ==> make_int64_iarray1$Lisp
  Qsize           ==> INT64VSIZE$Lisp
  Qelt            ==> INT64AREF11$Lisp
  Qsetelt         ==> INT64SETAREF11$Lisp
  Exports ==> JLVectorCategory(JLInt64) with
    qnew    : NonNegativeInteger -> %
    ++ qnew(n) returns an unitialized vector of dimension n.
    vector  : List JI64 -> %
    ++ vector(l) converts the list l to a vector.
    jlDisplay: % -> Void
    ++ jlDisplay(v) pretty prints v (à la Julia).
    juliaIVPrint : Boolean -> Boolean
    ++ juliaIVPrint(b) defines whether or not FriCAS uses 
    ++ the printing version of Julia for vectors instead of
    ++ its OutputForm version. Returns previous value.
    ++ By default it is the Julia version.
  Implementation ==> add
    import JLUtilityFunctions
    pprint := true
    jlInitialize(true)
    #x                  == Qsize x
    minIndex x          == 1$Lisp
    maxIndex x          == Qsize(x)
    empty()             == Qnew(0$Lisp)
    qnew(n)             == Qnew(n)
    new(n, x:JI64)      == Qnew1(n, x)
    qelt(x, i)          == Qelt(x, i)
    elt(x, i : Integer) ==
      i < 1 or i > #x =>
        error "elt$JLInt64Vector: index out of range"
      Qelt(x, i)
    qsetelt!(x, i, s)      == Qsetelt(x, i, s)
    setelt!(x : %, i : Integer, s) ==
      i < 1 or i > #x =>
        error "setelt!$JLInt64Vector: index out of range"
      Qsetelt(x, i, s)
    fill!(v, x)       == (for i in 1..Qsize v repeat Qsetelt(v, i, x); v)
    less?(v,n) == #v < n
    vector l == construct l
    coerce(v) : OutputForm      ==
      ~pprint => bracket [qelt(v, k)::OutputForm for k in 1$Lisp .. maxIndex v]
      ret: List OutputForm :=
        jl_stringify_1difunction("show", "_"text/plain_"", v)$Lisp
      pile(append(["" pretend OutputForm],rest ret))

    juliaIVPrint(b) ==
      oldpprint := pprint
      pprint:=b
      oldpprint
    jlDisplay(v) == jl_1difunction("display", v)$Lisp

)abbrev domain JF64VEC JLFloat64Vector
++ Description: This domain provides a fast JLFloat64 vector type
++ with no bound checking on elt's. Minimum index is 1.
JLFloat64Vector() : Exports == Implementation where
  NNI             ==> NonNegativeInteger
  JF64            ==> JLFloat64
  Qnew            ==> make_df_array1$Lisp
  Qnew1           ==> make_df_iarray1$Lisp
  Qsize           ==> DFVSIZE$Lisp
  Qelt            ==> DFAREF11$Lisp
  Qsetelt         ==> DFSETAREF11$Lisp
  Exports ==> JLVectorCategory(JLFloat64) with
    coerce  : % -> DoubleFloatVector
    ++ coerce(v) coerces a copy of v to a DoubleFloatVector.
    coerce! : % -> DoubleFloatVector
    ++ coerce!(v) coerces v to a DoubleFloatVector.
    vector  : List JF64 -> %
    ++ vector(l) converts the list l to a vector.
    qnew    : NonNegativeInteger -> %
    ++ qnew(n) returns an unitialized vector of dimension n.
    copy!: (%, %) -> %
    ++ copy!(b,a) copies efficiently a to b. No check are done on
    ++ arrays dimension.
    jlApply : (String, %) -> Void
    ++ jlApply(func, v) applies func to argument v.
    jlApply : (String, %) -> JF64
    ++ jlApply(func, v) applies func to argument v
    ++ and returns a Julia Float64.
    jlApply : (String, %) -> %
    ++ jlApply(func, v) applies func to argument v
    ++ and returns a JLFloat64Vector.
    jlApply : (String, %, JF64) -> JF64
    ++ jlApply(func, v, val) applies func to arguments v and val
    ++ and returns a Julia Float64.
    jlApply : (String, %, %) -> Void
    ++ jlApply(func, v1, v2) applies func to arguments v1 and v2.
    jlApply : (String, %, %, %) -> Void
    ++ jlApply(func, v1, v2, v3) applies func to
    ++ arguments v1, v2 and v3.
    jlApprox?: (%, %) -> Boolean
    ++ jlApprox?(x,y) computes inexact equality comparison
    ++ with default parameters. Two numbers compare equal
    ++ if their relative distance or their absolute distance
    ++ is within tolerance bounds. Applied component-vise.
    urand   :   (PositiveInteger, JF64) -> %
    ++ urand(n, x) returns a uniform(0..x) Julia vector of size n.
    ++ Use the underying Common Lisp random number generator so
    ++ jlSeed! will not affect it.
    urand01 :   PositiveInteger -> %
    ++ urand01(n) returns a uniform(0..1) Julia vector of size n.
    nrand :   PositiveInteger -> %
    ++ nrand(n) returns a Julia vector of size n with random elements
    ++ from the normal distribution with mean=0 and standard deviation=1.
    exprand : PositiveInteger -> %
    ++ exprand(n) returns a Julia vector of size n with random elements
    ++ from the exponential distribution with scale 1.
    jlDisplay: % -> Void
    ++ jlDisplay(v) pretty prints v (à la Julia).
    juliaVPrint : Boolean -> Boolean
    ++ juliaVPrint(b) defines whether or not FriCAS uses 
    ++ the printing version of Julia for vectors instead of
    ++ its OutputForm version. Returns previous value.
    ++ By default it is the Julia version.
  Implementation ==> add
    import from JLUtilityFunctions
    jlInitialize(true)
    defined?(func) ==> not jlDefined?(func) =>
      error concat(func, " is not defined in Julia")
    pprint := true

    #x                          == Qsize x
    minIndex x                  == 1$Lisp
    maxIndex x                  == Qsize(x)
    empty()                     == Qnew(0$Lisp)
    qnew(n)                     == Qnew(n)
    new(n, x:JF64)              == Qnew1(n, x)
    qelt(x, i)                  == Qelt(x, i)
    elt(x, i : Integer)         ==
      i < 1 or i > #x => error "elt$JLFloat64Vector: index out of range"
      qelt(x, i)
    qsetelt!(x, i, s:JF64)      == Qsetelt(x, i, s)
    setelt!(x : %, i : Integer, s : JF64) ==
      i < 1 or i > #x => error "setelt!$JLFloat64Vector: index out of range"
      Qsetelt(x, i, s)
    fill!(v, x)       == (for i in 1..Qsize v repeat Qsetelt(v, i, x); v)
    less?(v,n) == #v < n
    vector l == construct l
    coerce(x) : DoubleFloatVector == copy(x) pretend DoubleFloatVector
    coerce!(x) : DoubleFloatVector == x pretend DoubleFloatVector
    coerce(v) : OutputForm      ==
      ~pprint => bracket [qelt(v, k)::OutputForm for k in 1$Lisp .. maxIndex v]
      ret: List OutputForm :=
        jl_stringify_1dfunction(0$NNI, "show", "_"text/plain_"", v)$Lisp
      pile(append(["" pretend OutputForm],rest ret))

    copy!(b, a) ==
      jl_1d2function(0$NNI,"copy!", b, a)$Lisp
      b

    copy(a) ==
      b := qnew(Qsize a)
      jl_1d2function(0$NNI,"copy!", b, a)$Lisp
      b

    jlApply(func, v : %) : Void ==
      defined?(func)
      jl_1dfunction(0$NNI,func, v)$Lisp
    jlApply(func, v : %) : JF64 ==
      defined?(func)
      jl_dbl_1dfunction(0$NNI, func, v)$Lisp
    jlApply(func, v : %) : % ==
      defined?(func)
      ret := qnew(#v)
      jl_array_1dfunction(0$NNI, 0$NNI,func, ret, v)$Lisp
      ret
    jlApply(func, v : %, val : JF64) : JF64 ==
      defined?(func)
      jl_dbl_1dfunction_dbl(0$NNI, func, v, val)$Lisp
    jlApply(func, v1, v2) : Void ==
      defined?(func)
      jl_1d2function(0$NNI, func, v1, v2)$Lisp
    jlApply(func, v1, v2, v3) : Void ==
      defined?(func)
      jl_1d3function(func, v1, v2, v3)$Lisp
    jlApprox?(x, y) == jl_bool_1d2function(0$NNI,"isapprox", x, y)$Lisp
    juliaVPrint(b) ==
      oldpprint := pprint
      pprint:=b
      oldpprint

    jlDisplay(v) == jl_1dfunction(0$NNI,"display", v)$Lisp

    length(v) == jl_dbl_1dfunction(0$NNI,"norm", v)$Lisp

    reverse(v) ==
      vt := copy(v)
      jl_1dfunction(0$NNI,"reverse!", vt)$Lisp
      vt

    reverse!(v) == (jl_1dfunction(0$NNI,"reverse!", v)$Lisp;v)

    sort(v) ==
      vt := copy(v)
      jl_1dfunction(0$NNI,"sort!", vt)$Lisp;
      vt

    sort!(v) == (jl_1dfunction(0$NNI,"sort!", v)$Lisp;v)

    dot(v1,v2) == jl_dbl_1d2function(0$NNI,"dot",v1,v2)$Lisp

    urand01(n) ==
      v := qnew(n)
      jl_1dfunction(0$NNI,"rand!", v)$Lisp
      v

    urand(n, r) ==
      v := qnew(n)
      for i in 1..maxIndex(v) repeat setelt!(v, i, RANDOM(r)$Lisp)
      v

    nrand(n) ==
      v := qnew(n)
      jl_1dfunction(0$NNI,"randn!", v)$Lisp
      v

    exprand(n) ==
      v := qnew(n)
      jl_1dfunction(0$NNI,"randexp!", v)$Lisp
      v


)abbrev package JF64VEC2 JLFloat64VectorFunctions2
++ Author:
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++   This package provides operations which all take as arguments
++ JLFloat64Vector and functions from JLFloat64 to
++ JLFloat64. The operations all iterate over their vector argument
++ and either return a value of type JLFloat64Vector or a JLFloat64.

JLFloat64VectorFunctions2() : Exports == Implementation where
  A  ==> JLFloat64
  B  ==> JLFloat64
  VA ==> JLFloat64Vector
  VB ==> JLFloat64Vector
  O2 ==> FiniteLinearAggregateFunctions2(A, VA, B, VB)
  UB ==> Union(B,"failed")

  Exports ==> with
    scan   : ((A, B) -> B, VA, B) -> VB
    ++ scan(func, vec, ident) creates a new vector whose elements are
    ++ the result of applying reduce to the binary function func,
    ++ increasing initial subsequences of the vector vec,
    ++ and the element ident.
    reduce : ((A, B) -> B, VA, B) -> B
    ++ reduce(func, vec, ident) combines the elements in vec using the
    ++ binary function func. Argument ident is returned if vec is empty.
    map    : (A -> B, VA) -> VB
    ++ map(f, v) applies the function f to every element of the vector v
    ++ producing a new vector containing the values.
    map : (A -> UB, VA) -> Union(VB,"failed")
    ++ map(f, v) applies the function f to every element of the vector v
    ++ producing a new vector containing the values or \spad{"failed"}.

  Implementation ==> add
    scan(f, v, b)   == scan(f, v, b)$O2
    reduce(f, v, b) == reduce(f, v, b)$O2
    map(f : (A->B), v : VA) : VB == map(f, v)$O2

    map(f:(A -> UB), a:VA):Union(VB,"failed") ==
     res : List B  := []
     for u in entries(a) repeat
       r := f u
       r = "failed" => return "failed"
       res := cons(r::B, res)
     vector reverse! res

)abbrev domain JF64MAT JLFloat64Matrix
++ Description: This domain provides a fast JLFloat64 matrix type
++ with no bound checking on elt's. Minimum index is 1.
JLFloat64Matrix() :  Exports == Implementation where
  NNI         ==> NonNegativeInteger
  INT         ==> Integer
  JF64        ==> JLFloat64
  JF64VEC     ==> JLFloat64Vector
  Qnew        ==> make_df_array2$Lisp
  Qnew1       ==> make_df_iarray2$Lisp
  Qelt2       ==> DFAREF21$Lisp
  Qsetelt2    ==> DFSETAREF21$Lisp
  Row         ==> JLFloat64Vector
  Col         ==> JLFloat64Vector
  MLAF        ==> MatrixLinearAlgebraFunctions(JF64, Row, Col, %)
  Exports ==> JLMatrixCategory(JF64, Row, Col) with
    elt: (%, NonNegativeInteger) -> JF64
    ++ elt(m, i) returns the i-th elements of m.
    ++ Column major order.
    qelt: (%, NonNegativeInteger) -> JF64
    ++ qelt(m, i) returns the i-th elements of m.
    ++ Column major order.
    setelt!: (%, NonNegativeInteger, JF64) -> JF64
    ++ setelt!(m, i, r) sets the i-th elements of m to r.
    ++ Column major order.
    qsetelt!: (%, NonNegativeInteger, JF64) -> JF64
    ++ qsetelt!(m,) sets the i-th elements of m to r.
    ++ Column major order.
    coerce: % -> Matrix(DoubleFloat)
    ++ coerce(m) coerces a copy of m to a Matrix(DoubleFloat).
    jlVector: % -> JLFloat64Vector
    ++ jlVector(m) returns reference to the internal vector representation.
    jlApply : (String, %) -> Void
    ++ jlApply(func, x) apply func to argument x.
    jlApply : (String, %) -> JF64
    ++ jlApply(func, x) apply func to argument x.
    jlApply : (String, %, JF64) -> JF64
    ++ jlApply(func, x, val) apply func to arguments x and val.
    jlApply : (String, %) -> %
    ++ jlApply(func, x) apply func to argument x.
    jlDisplay: % -> Void
    ++ jlDisplay(m) pretty prints m (à la Julia).
    juliaMPrint : Boolean -> Boolean
    ++ juliaMPrint(b) defines whether or not FriCAS uses 
    ++ the printing version of Julia for matrices instead of
    ++ its OutputForm version. Returns previous value.
    ++ By default it is the Julia version.
    copy!: (%, %) -> %
    ++ copy!(b,a) copies efficiently a to b.No check are done on
    ++ arrays dimensions.
    identity:    PositiveInteger -> %
    ++ identity(n) returns a n by n identity matrix.S
    urand   :   (PositiveInteger, PositiveInteger, JF64) -> %
    ++ urand(m,n,x) returns a uniform(0..x) Julia matrix of size (m,n).
    ++ Use the underying Common Lisp random number generator so
    ++ jlSeed! will not affect it.
    urand01 :   (PositiveInteger, PositiveInteger) -> %
    ++ urand01(m,n) returns a uniform(0..1) Julia matrix of size (m,n).
    nrand :   (PositiveInteger, PositiveInteger) -> %
    ++ nrand(m,n) returns a Julia matrix of size (m,n) with random
    ++ elements from the normal distribution with mean=0
    ++ and standard deviation=1.
    exprand : (PositiveInteger, PositiveInteger) -> %
    ++ exprand(m,n) returns a Julia matrix of size (m,n) with random elements
    ++ from the exponential distribution with scale 1.
    positiveDefinite? : % -> Boolean
    ++ positiveDefinite?(m) tests wether or not m is positive definite.
    ++ Use a Cholesky factorisation.
    jlApprox?: (%, %) -> Boolean
    ++ jlApprox?(x,y) computes inexact equality comparison
    ++ with default parameters. Two numbers compare equal
    ++ if their relative distance or their absolute distance
    ++ is within tolerance bounds. Applied component-wise.
    symmetricPart: % -> %
    ++ symmetricPart(m) returns the symmetric part of m (m + m')/2.
    symmetricPart!: % -> %
    ++ symmetricPart!(m) overwites m with the symmetric part of m (m + m')/2
    ++ to save memory space and returns m.
    skewPart: % -> %
    ++ skewPart(m) returns the skew part of m (m - m')/2.
    diagonalMatrix:   JF64VEC -> %
    ++ diagonalMatrix(v) returns a diagonal matrix with elements of v.
    transpose!:     (%, %) -> %
    ++ transpose!(b, a) stores transposed a in b.
  Implementation ==> add
    import from JLUtilityFunctions
    import from JLF64LinearAlgebra
    import from JLFloat64Vector
    jlInitialize(true)

    Rep := Record(elts : JLFloat64Vector,
        ncols : NonNegativeInteger, nrows : NonNegativeInteger)

    defined?(func) ==> not jlDefined?(func) =>
      error concat(func, " is not defined in Julia")
    pprint := true

    minRowIndex x == 1
    minColIndex x == 1
    nrows x == x.ncols
    ncols x == x.nrows
    maxRowIndex x == x.ncols
    maxColIndex x == x.nrows
    #m == #m.elts

    qelt(m, i, j) == Qelt2(m.elts, m.ncols, m.nrows, j, i)
    elt(m:%, i:INT, j:INT) : JF64 ==
      i < 1 or i > m.ncols or j < 1 or j > m.ncols =>
        error "elt$JLFloat64Matrix: index(es) out of range"
      Qelt2(m.elts, m.ncols, m.nrows, j, i)
    elt(m:%, i:NonNegativeInteger) ==
      i > #m => error "elt$JLFloat64Matrix: index out of range"
      DFAREF11(m.elts,i)$Lisp
    qelt(m:%, i:NonNegativeInteger) ==
      DFAREF11(m.elts,i)$Lisp
    setelt!(m : %, i : NonNegativeInteger, r : JF64) ==
      i > #m =>
        error "setelt!$JLFloat64Matrix: index out of range"
      DFSETAREF11(m.elts,i,r)$Lisp
    qsetelt!(m : %, i : NonNegativeInteger, r : JF64) ==
      DFSETAREF11(m.elts,i,r)$Lisp

    qsetelt!(m, i, j, r) == Qsetelt2(m.elts, m.ncols, m.nrows, j, i, r)
    setelt!(m : %, i : Integer, j : Integer, r : JF64) ==
      i < 1 or i > m.ncols or j < 1 or j > m.ncols =>
        error "elt$JLFloat64Matrix: index(es) out of range"
      Qsetelt2(m.elts, m.ncols, m.nrows, j, i, r)
    empty() == error "empty()$JLFloat64Matrix is not supported"
    qnew(rows, cols) ==
      m: JLFloat64Vector := Qnew(rows, cols)
      [m, rows, cols]
  
    new(rows, cols, a) ==
      m: JLFloat64Vector := Qnew1(cols, rows, a)
      [m, rows, cols]
    jlVector(mat) == mat.elts
  
    zero(m,n) == new(m,n,0)

    jlApply(func, m : %) : Void ==
      defined?(func)
      jl_2dfunction(0$NNI,func, m.elts, m.ncols)$Lisp
    jlApply(func, m : %) : JF64 ==
      defined?(func)
      jl_dbl_2dfunction(0$NNI, func, m.elts, m.ncols)$Lisp
    jlApply(func, m : %, val : JF64) : JF64 ==
      defined?(func)
      jl_dbl_2dfunction_dbl(0$NNI,func,  m.elts, m.ncols, val)$Lisp
    jlApply(func, m) : % ==
      ret := qnew(m.nrows, m.ncols)
      jl_array_2dfunction(0$NNI,0$NNI,func, ret.elts, m.elts, m.ncols)$Lisp
      ret

    jlDisplay(m) ==
      jl_2dfunction(0$NNI,"display", m.elts, m.ncols)$Lisp

    juliaMPrint(b) ==
      oldpprint := pprint
      pprint:=b
      oldpprint

    coerce(m : %) : OutputForm ==
      if pprint then
        ret: List OutputForm :=
          jl_stringify_2dfunction(0$NNI, "show", "_"text/plain_"",
            m.elts, m.ncols)$Lisp
        pile(append(["" pretend OutputForm],rest ret))
      else
        l : List List OutputForm
        l := [[qelt(m, j, i) :: OutputForm _
          for i in 1 .. ncols(m)] _
          for j in 1 .. nrows(m)]
        matrix l

    coerce(m : %) : Matrix(DoubleFloat) ==
        l : List List DoubleFloat
        l := [[qelt(m, j, i)::DoubleFloat _
          for i in 1 .. ncols(m)] _
          for j in 1 .. nrows(m)]
        matrix l

    square?(m) == m.nrows = m.ncols
    zero?(m) == jl_bool_2dfunction(0$NNI, "iszero", m.elts, m.ncols)$Lisp
    diagonal?(m) == jl_bool_2dfunction(0$NNI, "isdiag", m.elts, m.ncols)$Lisp
    symmetric?(m : %) : Boolean ==
      jl_bool_2dfunction(0$NNI,"issymmetric", m.elts, m.ncols)$Lisp
    positiveDefinite?(m : %) : Boolean ==
      jl_bool_2dfunction(0$NNI,"isposdef", m.elts, m.ncols)$Lisp
    jlApprox?(x, y) ==
      jl_bool_2d2function(0$NNI,"isapprox", jlVector(x), nrows(x),
        jlVector(y), nrows(y))$Lisp
    copy!(b, a) ==
      jl_2d2function(0$NNI,"copy!",
        b.elts, b.ncols, a.elts, a.ncols)$Lisp
      b

    copy(a) ==
      b := qnew(a.nrows, a.ncols)
      jl_2d2function(0$NNI,"copy!", b.elts, b.ncols, a.elts, a.ncols)$Lisp
      b

    transpose(m) ==
      b := qnew(m.ncols, m.nrows)
      jl_2d2function(0$NNI,"transpose!",
        b.elts, b.ncols, m.elts, m.ncols)$Lisp
      b

    transpose!(b,a) ==
      jl_2d2function(0$NNI,"transpose!", b.elts, b.ncols, a.elts, a.ncols)$Lisp
      b

    -- ??? why the pretend?
    rank(m) ==
      prec : JF64 := DOUBLE_-FLOAT_-EPSILON$Lisp
      rank(m pretend JLFloat64Matrix, prec * jf64(10))$JLF64LinearAlgebra

    inverse(m) ==
      m.nrows ~= m.ncols => error "inverse: matrix is not square"
      inv := qnew(m.ncols, m.ncols)
      jl_array_2dfunction(0$NNI,0$NNI,"inv", inv.elts, m.elts, m.ncols)$Lisp
      inv

    symmetricPart(m) ==
      m.nrows ~= m.ncols => error "symmetricPart: matrix is not square"
      sym := copy m
      jl_2dfunction(0$NNI,"hermitianpart!", sym.elts, sym.ncols)$Lisp
      sym

    symmetricPart!(m) ==
      m.nrows ~= m.ncols => error "symmetricPart!: matrix is not square"
      jl_2dfunction(0$NNI,"hermitianpart!", m.elts, m.ncols)$Lisp
      m

    skewPart(m) ==
      m.nrows ~= m.ncols => error "skewPart: matrix is not square"
      sym := copy m
      jl_2dfunction(0$NNI,"hermitianpart!", sym.elts, sym.ncols)$Lisp
      m - sym

    a : % * b : % ==
      (nr := a.nrows) ~= (nc := b.ncols) =>
        error "Matrix multiplication: ncols(a) ~= nrows(b)"
      c := qnew(nrows(a), ncols(b))
      jl_2d3function(0$NNI,"mul!", c.elts, c.ncols,
        a.elts, a.ncols, b.elts, b.ncols)$Lisp
      c

    identity(n) ==
      m := new(n,n,0)
      for i in 1..n repeat setelt!(m,i,i,1)
      m

    urand01(m, n) ==
      mat := qnew(m,n)
      jl_2dfunction(0$NNI,"rand!", mat.elts, mat.ncols)$Lisp
      mat

    urand(m, n, r) ==
      mat := qnew(m,n)
      for i in 1 .. ncols(mat) repeat _
      for j in 1 .. nrows(mat) repeat _
        setelt!(mat, j, i, RANDOM(r)$Lisp)
      mat

    nrand(m, n) ==
      mat := qnew(m,n)
      jl_2dfunction(0$NNI,"randn!", mat.elts, mat.ncols)$Lisp
      mat

    exprand(m, n) ==
      mat := qnew(m,n)
      jl_2dfunction(0$NNI,"randexp!", mat.elts, mat.ncols)$Lisp
      mat

    determinant(m) ==
      m.nrows ~= m.ncols => error "determinant: matrix is not square"
      jl_dbl_2dfunction(0$NNI,"det", m.elts, m.ncols)$Lisp
    
    diagonalMatrix(v:JF64VEC) ==
      n : NNI := #v
      u := new(n, n, 0$JF64)
      for i in 1..n repeat setelt!(u, i, i, elt(v,i))
      u

    nullity(m) == nullity(m)$MLAF
    nullSpace(m) == nullSpace(m)$MLAF
    rowEchelon(m) == rowEchelon(m)$MLAF
    minordet(m) == minordet(m)$MLAF

)abbrev domain JF64SMAT JLF64SquareMatrix
++ Description: This domain provides a fast Julia Float64
++ square matrix type with no bound checking on elt's. Minimum index is 1.
JLF64SquareMatrix(n: NonNegativeInteger) : Exports == Implementation where
  Row ==> DirectProduct(n, JLFloat64)
  Col ==> DirectProduct(n, JLFloat64)
  Exports ==> Join(JLType, SquareMatrixCategory(n, JLFloat64,
      Row, Col), CoercibleTo(JLFloat64Matrix)) with
    qcoerce: JLFloat64Matrix -> %
    ++ qcoerce(m) coerces m to JLF64SquareMatrix
    ++ trusting that m is square.
    squareMatrix: JLFloat64Matrix -> %
    ++ squareMatrix(m) returns a copy of m as a JLF64SquareMatrix.
  Implementation ==>  JLFloat64Matrix add
    import from JLFloat64Matrix
    JF64MAT ==> JLFloat64Matrix
    NNI ==> NonNegativeInteger
    qcoerce(m) == m pretend %
    coerce(m) == m pretend JLFloat64Matrix

    0  : % == new(n,n,0)$JF64MAT pretend %
    1  : % == scalarMatrix(n,1)$JF64MAT pretend %
    scalarMatrix(x) == scalarMatrix(n, x)$JF64MAT pretend %

    matrix(ll) ==
      (#ll = n) and (#ll.1 = n) => matrix(ll)$JF64MAT pretend %
      error "matrix: incompatible dimensions"

    squareMatrix(m) ==
      nr := nrows(m)
      nr ~= n or nr ~= ncols(m) => error "squareMatrix: incompatible dimensions"
      copy(m) pretend %

    one?(m) == jl_bool_2dfunction(0$NNI, "isone",
      jlVector(m pretend JF64MAT), ncols(m pretend JF64MAT))$Lisp

)abbrev domain JCF64VEC JLComplexF64Vector
++ Description: This domain provides a fast JLComplexF64 vector type
++ with no bound checking on elt's. Minimum index is 1.
JLComplexF64Vector() :  Exports == Implementation where
  NNI         ==> NonNegativeInteger
  JF64        ==> JLFloat64
  JF64VEC     ==> JLFloat64Vector
  Qelt1       ==> JCDELT$Lisp
  Qsetelt1    ==> JCDSETELT$Lisp
  Qsize       ==> CDLEN$Lisp
  Qnew        ==> MAKE_CDOUBLE_VECTOR$Lisp
  Exports ==> JLVectorCategory(JLComplexF64) with
    qnew : NNI -> %
      ++ qnew(n) creates a new uninitialized vector of length n.
    vector : List JLComplexF64 -> %
    ++ vector(l) converts the list l to a vector.
    real : % -> JF64VEC
    ++ real(v) returns a JLFloat64 vector with the real part
    ++ of the v elements.
    imag : % -> JF64VEC
    ++ imag(v) returns a JLFloat64 vector with the imaginary part
    ++ of the v elements.
    copy!   : (%, %) -> %
    ++ copy!(b,a) copies efficiently a to b. No check are done on
    ++ arrays dimension.
    jlApply : (String, %) -> Void
    ++ jlApply(func, x) apply func to argument x.
    jlApply : (String, %) -> JF64
    ++ jlApply(func, x) apply func to argument x.
    jlApply : (String, %, JF64) -> JF64
    ++ jlApply(func, x, val) apply func to arguments x and val.
    jlApprox?: (%, %) -> Boolean
    ++ jlApprox?(x,y) computes inexact equality comparison
    ++ with default parameters.Two numbers compare equal
    ++ if their relative distance or their absolute distance
    ++ is within tolerance bounds. Applied component-wise.
    urand01 :   PositiveInteger -> %
    ++ urand01(n) returns a uniform(0..1) Julia vector of size n.
    nrand :   PositiveInteger -> %
    ++ nrand(n) returns a normally distributed Julia vector of size n.
    ++ See Julia documentation (randn) for this complex version used here.
    jlDisplay : % -> Void
    ++ jlDisplay(v) pretty prints v (à la Julia).
    juliaCVPrint : Boolean -> Boolean
    ++ juliaCVPrint(b) defines whether or not FriCAS uses 
    ++ the printing version of Julia for matrices instead of
    ++ its OutputForm version. Returns previous value.
    ++ By default it is the Julia version.
  Implementation ==> add
    import from JLUtilityFunctions
    import from JLCF64LinearAlgebra
    jlInitialize(true)
    defined?(func) ==> not jlDefined?(func) =>
      error concat(func, " is not defined in Julia")
    pprint := true

    qelt(x, i)                  == Qelt1(x, i)
    elt(x, i : Integer)         ==
      i < 1 or i > #x =>
        error "elt$JLComplexF64Vector: index out of range"
      Qelt1(x, i)
    qsetelt!(x, i, s)           == Qsetelt1(x, i, s)
    setelt!(x : %, i : Integer, s:JLComplexF64) ==
      i < 1 or i > #x =>
        error "setelt!$JLComplexF64Vector: index out of range"
      Qsetelt1(x, i, s)
    #x          == Qsize x
    minIndex x  == 1
    empty()     == Qnew(0$Lisp)
    qnew(n)     == Qnew(n)
    new(n, x)   ==
      res : % := Qnew(n)
      fill!(res, x)
    vector l == construct l

    fill!(x, s) ==
      for i in 1..Qsize(x) repeat Qsetelt1(x, i, s)
      x

    real(v) ==
      ret := qnew(#v)$JF64VEC
      jl_array_1dfunction(0$NNI, 1$NNI,"real", ret, v)$Lisp
      ret

    imag(v) ==
      ret := qnew(#v)$JF64VEC
      jl_array_1dfunction(0$NNI, 1$NNI,"imag", ret, v)$Lisp
      ret
    
    copy!(b, a) ==
      jl_1d2function(1$NNI,"copy!",b,a)$Lisp
      b

    copy(a) ==
      b := qnew(Qsize a)
      jl_1d2function(1$NNI,"copy!",b,a)$Lisp
      b
    jlApprox?(x, y) == jl_bool_1d2function(1$NNI, "isapprox", x, y)$Lisp
    jlApply(func, v : %) : Void ==
      defined?(func)
      jl_1dfunction(1$NNI, func, v)$Lisp
    jlApply(func, v : %) : JF64 ==
      defined?(func)
      jl_dbl_1dfunction(1$NNI, func, v)$Lisp
    jlApply(func, v : %, val : JF64) : JF64 ==
      defined?(func)
      jl_dbl_1dfunction_dbl(1$NNI,func, v, val)$Lisp

    urand01(n) ==
      v := qnew(n)
      jl_1dfunction(1$NNI,"rand!", v)$Lisp
      v

    nrand(n) ==
      v := qnew(n)
      jl_1dfunction(1$NNI, "randn!", v)$Lisp
      v
  
    juliaCVPrint(b) ==
      oldpprint := pprint
      pprint:=b
      oldpprint

    jlDisplay(v) == jl_1dfunction(1$NNI,"display", v)$Lisp

    coerce(v) : OutputForm      ==
      ~pprint => bracket [qelt(v, k)::OutputForm for k in 1$Lisp .. maxIndex v]
      ret: List OutputForm :=
        jl_stringify_1dfunction(1$NNI, "show", "_"text/plain_"", v)$Lisp
      pile(append(["" pretend OutputForm],rest ret))


)abbrev domain JCF64MAT JLComplexF64Matrix
++ Description: This domain provides a fast JLComplexF64 matrix type
++ with no bound checking on elt's. Minimum index is 1.
JLComplexF64Matrix() : Exports == Implementation where
  JF64        ==> JLFloat64
  JF64MAT     ==> JLFloat64Matrix
  JCF64       ==> JLComplexF64
  JCF64VEC    ==> JLComplexF64Vector
  NNI         ==> NonNegativeInteger
  Qelt2       ==> JCDELT2$Lisp
  Qsetelt2    ==> JCDSETELT2$Lisp
  Qnew        ==> MAKE_CDOUBLE_VECTOR$Lisp
  Row         ==> JLComplexF64Vector
  Col         ==> JLComplexF64Vector
  MLAF        ==> MatrixLinearAlgebraFunctions(JCF64, Row, Col, %)
  Exports ==> JLMatrixCategory(JCF64, Row, Col) with
    elt: (%, NonNegativeInteger) -> JCF64
    ++ elt(m, i) returns the i-th elements of m.
    ++ Column major order.
    qelt: (%, NonNegativeInteger) -> JCF64
    ++ qelt(m, i) returns the i-th elements of m.
    ++ Column major order.
    setelt!: (%, NonNegativeInteger, JCF64) -> JCF64
    ++ setelt!(m, i, r) sets the i-th elements of m to r.
    ++ Column major order.
    qsetelt!: (%, NonNegativeInteger, JCF64) -> JCF64
    ++ qsetelt!(m,) sets the i-th elements of m to r.
    ++ Column major order.
    coerce: JF64MAT -> %
    ++ coerce(m) coerces m to a a Julia Complex Float 64 matrix.
    jlDisplay : % -> Void  
    ++ jlDisplay(m) pretty prints m (à la Julia).
    jlVector: % -> JLComplexF64Vector
    ++ jlVector(m) returns reference to the internal vector representation.
    real : % -> JF64MAT
    ++ real(m) returns a JLFloat64 matrix with the real part of the
    ++ m elements.
    imag : % -> JF64MAT
    ++ imag(m) returns a JLFloat64 matrix with the imaginary part
    ++ of the m elements.
    jlApply : (String, %) -> Void
    ++ jlApply(func, x) apply func to argument x.
    jlApply : (String, %) -> JF64
    ++ jlApply(func, x) apply func to argument x.
    jlApply : (String, %, JF64) -> JF64
    ++ jlApply(func, x, val) apply func to arguments x and val.
    hermitian? : % -> Boolean
    ++ hermitian?(m) tests hermiticity of m.
    positiveDefinite? : % -> Boolean
    ++ positiveDefinite?(m) tests wether or not m is Hermitian
    ++ positive definite using a Cholesky factorisation.
    jlApprox?: (%, %) -> Boolean
    ++ jlApprox?(x,y) computes inexact equality comparison
    ++ with default parameters. Two numbers compare equal
    ++ if their relative distance or their absolute distance
    ++ is within tolerance bounds. Applied component-wise.
    hermitianPart: % -> %
    ++ hermitianPart(m) returns the symmetric part of m (m + m')/2.
    hermitianPart!: % -> %
    ++ hermitianPart!(m) overwites m with the symmetric part of m (m + m')/2
    ++ to save memory space and returns m.
    copy!   : (%, %) -> %
    ++ copy!(b,a) copies efficiently a to b. No check are done on
    ++ arrays dimensions.
    diagonalMatrix:   JCF64VEC -> %
    ++ diagonalMatrix(v) returns a diagonal matrix with elements of v.
    urand01:   (PositiveInteger, PositiveInteger) -> %
    ++ urand01(m,n) returns a uniform(0..1) Julia matrix of size (m,n).
    nrand :   (PositiveInteger, PositiveInteger) -> %
    ++ nrand(m,n) returns a Julia matrix of size (m,n) with random
    ++ elements from the normal distribution with mean=0
    ++ See Julia documentation (randn) for this complex version used here.
    transpose!:     (%, %) -> %
    ++ transpose!(b, a) stores transposed a in b.
    adjoint:     % -> %
    ++ adjoint(m) returns the adjoint of m i.e. the conjugate
    ++ transposition of m.
    adjoint!:     (%, %) -> %
    ++ adjoint!(a, m) stores in a the adjoint of m i.e.
    ++ the conjugate transposition of m.
    juliaCMPrint : Boolean -> Boolean
    ++ juliaCMPrint(b) defines whether or not FriCAS uses 
    ++ the printing version of Julia for matrices instead of
    ++ its OutputForm version. Returns previous value.
    ++ By default it is the Julia version.
  Implementation ==> add
    import from JLUtilityFunctions
    import from JLCF64LinearAlgebra
    import from JLFloat64Vector
    import from JLFloat64Matrix
    jlInitialize(true)

    defined?(func) ==> not jlDefined?(func) =>
      error concat(func, " is not defined in Julia")
    pprint := true

    Rep := Record(elts : JLComplexF64Vector,
        ncols : NonNegativeInteger, nrows : NonNegativeInteger)

    minRowIndex x == 1
    minColIndex x == 1
    nrows x == x.ncols
    ncols x == x.nrows
    maxRowIndex x == x.ncols
    maxColIndex x == x.nrows

    qelt(m, i, j) == Qelt2(m.elts, m.ncols, j, i)
    elt(m : %, i : Integer, j : Integer) : JCF64 ==
      i < 1 or i > m.ncols or j < 1 or j > m.ncols =>
        error "elt$JLComplexF64Matrix: index(es) out of range"
      Qelt2(m.elts, m.ncols, j, i)
    qsetelt!(m, i, j, r) == Qsetelt2(m.elts, m.ncols, j, i, r)
    setelt!(m : %, i : Integer, j : Integer, r : JCF64) ==
      i < 1 or i > m.ncols or j < 1 or j > m.ncols =>
        error "setelt!$JLComplexF64Matrix: index(es) out of range"
      Qsetelt2(m.elts, m.ncols, j, i, r)
    elt(m:%, i:NonNegativeInteger) ==
      i > #m => error "elt$JLFloat64Matrix: index out of range"
      JCDELT(m.elts,i)$Lisp
    qelt(m:%, i:NonNegativeInteger) ==
      JCDELT(m.elts,i)$Lisp
    setelt!(m : %, i : NonNegativeInteger, r : JCF64) ==
      i > #m =>
        error "setelt!$JLFloat64Matrix: index out of range"
      JCDSETELT(m.elts,i,r)$Lisp
    qsetelt!(m : %, i : NonNegativeInteger, r : JCF64) ==
      JCDSETELT(m.elts,i,r)$Lisp
    empty() == error "empty()$JLComplexF64Matrix is not supported"
    qnew(rows, cols) ==
      vec : JCF64VEC := Qnew(rows*cols)
      [vec, rows, cols]
    new(rows, cols, a) ==
      vec : JCF64VEC := new(rows*cols, a)
      [vec,rows,cols]
    jlVector(mat) == mat.elts

    zero(m,n) == new(m,n,0)

    real(m) ==
      nr := nrows(m)
      ret := qnew(nr, ncols(m))$JF64MAT
      jl_array_2dfunction(0$NNI,1$NNI,"real",
        jlVector(ret), jlVector(m), nr)$Lisp
      ret

    imag(m) ==
      nr := nrows(m)
      ret := qnew(nr, ncols(m))$JF64MAT
      jl_array_2dfunction(0$NNI,1$NNI,"imag",
        jlVector(ret), jlVector(m), nr)$Lisp
      ret

    square?(m) == m.nrows = m.ncols
    zero?(m) == jl_bool_2dfunction(1$NNI, "iszero", m.elts, m.ncols)$Lisp
    diagonal?(m) == jl_bool_2dfunction(1$NNI, "isdiag", m.elts, m.ncols)$Lisp
    symmetric?(m : %) : Boolean ==
      jl_bool_2dfunction(1$NNI,"issymmetric", m.elts, m.ncols)$Lisp
    hermitian?(m : %) : Boolean ==
      jl_bool_2dfunction(1$NNI,"ishermitian", m.elts, m.ncols)$Lisp
    positiveDefinite?(m : %) : Boolean ==
      jl_bool_2dfunction(1$NNI,"isposdef", m.elts, m.ncols)$Lisp
    jlApprox?(x, y) : Boolean ==
      jl_bool_2d2function(1$NNI,"isapprox", jlVector(x), nrows(x),
        jlVector(y), nrows(y))$Lisp

    hermitianPart(m) ==
      m.nrows ~= m.ncols => error "hermitianPart: matrix is not square"
      her := copy m
      jl_2dfunction(1$NNI,"hermitianpart!", her.elts, her.ncols)$Lisp
      her
    hermitianPart!(m) ==
      m.nrows ~= m.ncols => error "hermitianPart!: matrix is not square"
      jl_2dfunction(1$NNI,"hermitianpart!", m.elts, m.ncols)$Lisp
      m

    copy!(b, a) ==
      jl_2d2function(1$NNI,"copy!", b.elts, b.ncols,
        a.elts, a.ncols)$Lisp
      b

    copy(a) ==
      b := qnew(a.nrows, a.ncols)
      jl_2d2function(1$NNI,"copy!",
        b.elts, b.ncols, a.elts, a.ncols)$Lisp
      b

    transpose(m) ==
      b := qnew(m.ncols, m.nrows)
      jl_2d2function(1$NNI,"transpose!",
        b.elts, b.ncols, m.elts, m.ncols)$Lisp
      b

    transpose!(b,a) ==
      jl_2d2function(1$NNI,"transpose!",
        b.elts, b.ncols, a.elts, a.ncols)$Lisp
      b

    adjoint(m) ==
      b := qnew(m.ncols, m.nrows)
      jl_2d2function(1$NNI,"adjoint!",
        b.elts, b.ncols, m.elts, m.ncols)$Lisp
      b

    adjoint!(b,a) ==
      jl_2d2function(1$NNI,"adjoint!",
        b.elts, b.ncols, a.elts, a.ncols)$Lisp
      b

    jlApply(func, m : %) : Void ==
      defined?(func)
      jl_2dfunction(1$NNI,func, m.elts, m.ncols)$Lisp
    jlApply(func, m : %) : JF64 ==
      defined?(func)
      jl_dbl_2dfunction(1$NNI,func,  m.elts, m.ncols)$Lisp
    jlApply(func, m : %, val : JF64) : JF64 ==
      defined?(func)
      jl_dbl_2dfunction_dbl(1$NNI,func,  m.elts, m.ncols, val)$Lisp

    a : % * b : % ==
      (nr := a.nrows) ~= (nc := b.ncols) =>
        error "Matrix multiplication: ncols(a) ~= nrows(b)"
      c := qnew(nrows(a), ncols(b))
      jl_2d3function(1$NNI,"mul!", c.elts, c.ncols,
        a.elts, a.ncols, b.elts, b.ncols)$Lisp
      c

    -- ??? why the pretend?
    rank(m) ==
      prec : JF64 := DOUBLE_-FLOAT_-EPSILON$Lisp
      rank(m pretend JLComplexF64Matrix,
        prec * jf64(10))$JLCF64LinearAlgebra

    inverse(m) ==
      m.nrows ~= m.ncols => error "inverse: matrix is not square"
      inv : % := qnew(m.ncols, m.ncols)
      jl_array_2dfunction(1$NNI,1$NNI,"inv", inv.elts,
        m.elts, m.ncols)$Lisp
      inv

    determinant(m) == determinant(m)$MLAF
    nullity(m) == nullity(m)$MLAF
    nullSpace(m) == nullSpace(m)$MLAF
    rowEchelon(m) == rowEchelon(m)$MLAF
    minordet(m) == minordet(m)$MLAF

    jlDisplay(m) ==
      jl_2dfunction(1$NNI,"display", m.elts, m.ncols)$Lisp

    juliaCMPrint(b) ==
      oldpprint := pprint
      pprint:=b
      oldpprint

    diagonalMatrix(v:JCF64VEC) ==
      n : NNI := #v
      u := new(n, n, 0$JCF64)
      for i in 1..n repeat setelt!(u, i, i, elt(v,i))
      u

    urand01(m, n) ==
      mat := qnew(m, n)
      jl_2dfunction(1$NNI,"rand!", mat.elts, mat.ncols)$Lisp
      mat

    nrand(m, n) ==
      mat := qnew(m, n)
      jl_2dfunction(1$NNI,"randn!", mat.elts, mat.ncols)$Lisp
      mat

    coerce(m : %) : OutputForm ==
      if pprint then
        ret: List OutputForm :=
          jl_stringify_2dfunction(1$NNI, "show", "_"text/plain_"",
            m.elts, m.ncols)$Lisp
        pile(append(["" pretend OutputForm],rest ret))
      else
        l : List List OutputForm
        l := [[qelt(m, j, i) :: OutputForm _
          for i in 1 .. ncols(m)] _
          for j in 1 .. nrows(m)]
        matrix l

    coerce(m : JLFloat64Matrix) : % ==
      newm := qnew(nrows(m), ncols(m))
      for i in 1 .. ncols(m) repeat
        for j in 1 .. nrows(m) repeat
          qsetelt!(newm, i, j, complex(qelt(m, i, j), 0)$JCF64)             
      newm

)abbrev domain JCF64SMA JLComplexF64SquareMatrix
++ Description: This domain provides a fast Julia Float64
++ square matrix type with no bound checking on elt's. Minimum index is 1.
JLComplexF64SquareMatrix(n : NonNegativeInteger) : Exports == Implementation where
  Row ==> DirectProduct(n, JLComplexF64)
  Col ==> DirectProduct(n, JLComplexF64)
  Exports ==> Join(JLType, SquareMatrixCategory(n, JLComplexF64, 
          Row, Col), CoercibleTo(JLComplexF64Matrix)) with
    qcoerce: JLComplexF64Matrix -> %
    ++ qcoerce(m) coerces m to JLComplexF64SquareMatrix
    ++ trusting that m is square.
    coerce: % -> JLComplexF64Matrix
    ++ coerce(m) coerces m to JLComplexF64Matrix
    squareMatrix: JLComplexF64Matrix -> %
    ++ squareMatrix(m) returns a copy of m as 
    ++ a JLComplexF64SquareMatrix.
  Implementation ==> JLComplexF64Matrix add
    import from JLComplexF64Matrix
    JCF64MAT ==> JLComplexF64Matrix
    NNI ==> NonNegativeInteger

    qcoerce(m) == m pretend %
    coerce(m) == m pretend JLComplexF64Matrix

    0  : % == new(n,n,0)$JCF64MAT pretend %
    1  : % == scalarMatrix(n,1)$JCF64MAT pretend %

    matrix(ll) ==
      (#ll = n) and (#ll.1 = n) => matrix(ll)$JCF64MAT pretend %
      error "matrix: incompatible dimensions"

    squareMatrix(m) ==
      nr := nrows(m)
      nr ~= n or nr ~= ncols(m) => error "squareMatrix: incompatible dimensions"
      copy(m) pretend %

    one?(m) == jl_bool_2dfunction(1$NNI, "isone",
      jlVector(m pretend JCF64MAT), ncols(m pretend JCF64MAT))$Lisp
